INSTALAR
========

ver INSTALL

CONFIGURANDO APACHE
===================

En debian copiamos la configuracion a /etc/apache2/conf.d/:

  # cp /var/www/almidon/demo/almidon.conf /etc/apache2/conf.d/


CREANDO E INSTALANDO ALMIDON DESDE PAQUETE DEBIAN 
=================================================

Requisitos para contruir el paquete debian

build-essential(o devscripts)
dh_make(>= 0.44)
dpkg-dev(>= 1.14.16.6)
fakeroot(>= 1.9)
gnupg(>= 1.4.6)


Los siguientes pasos deben realizarse las instrucciones necesarios para la contrucción del paquete debian:

Paso 1: Descomprimimos el instalador de Almidon. Más información sobre como generar el instalador a partir de los archivos y directorios provistos por el proyecto Almidón, lea el archivo INSTALL para seguir las instrucciones y obtener el instalador de Almidón.
 #tar -xvzf /ruta/hacia/el/directorio/que/genera/el/archivo/comprimido/llamado/almidon-version.tar.gz

Paso 2: Copiamos el archivo comprimido llamado almidon-version.tar.gz dentro del la carpeta que nos generó la descompresión dicho archivo.
 #cp almidon-version.tar.gz almidon-version
 
Paso 3: Ingresamos al directorio que obtuvo después de descomprimir almidon-version.tar.gz
 # cd almidon-version

Importante: Sólo si desea firmar el paquete debian que se genera
Paso Opcional Nº1: Crear la llave GPG para firmar el paquete de software de Almidon
 Una vez instalados los paquetes vamos a generar una llave GPG para firmar nuestro paquete de software de Almidon (si no la 
 tuviéramos por alguna otra razón).
 # gpg --gen-key
   Ejecutamos el comando anterior y nos pide que introduzcamos los siguientes:
   Nombre y Apellidos( Nombre Completo ): 
   e-mail:
   Comentario:
   
   Nota: Cualquier de los tres campos pueden ser dejados en blanco, aunque es recomendable rellenar al menos uno.

 Aquí seleccionamos las opciones por defecto, agregamos nuestro nombre y apellidos, dirección de e-mail, etc. Es posible  
 que durante la generación de la llave GPG nos falte entropía para la generación de las llaves, para lo cual debemos mover 
 el mouse, hacer uso del disco duro y la red, etc. 
 
 Finalmente GPG nos pedirá una contraseña para acceder a nuestra llave.

 - Si queremos ver las claves GPG disponibles: 
  gpg --list-keys

 Generando una salida similar a ésta:
 pub   1024D/38A1A829 2010-10-07
 uid                   Nombre Completo <e-mail> (Comentario)
 sub   2048g/8314FEBD 2010-10-07
                 |--> Esto corresponde a la clave
 

 - Si dado caso deseamos exportar las claves desde nuestra computadora donde se originó la 
   clave, hacemos los siguientes:
   Clave pública: # gpg --armor --output ficheroDeSalida --export ClaveID 
   Clave privada: # gpg --armor --output ficheroDeSalida --export-secret-key ClaveID

  - Si dado caso deseamos exportar las claves desde nuestra computadora donde se originó la 
   clave, hacemos los siguientes:
   Clave pública: # gpg --armor --output ficheroDeSalida --export ClaveID 
   Clave privada: # gpg --armor --output ficheroDeSalida --export-secret-key ClaveID

  Importar una clave desde un servidor
  Si queremos subir una clave a un servidor para que esté disponbile para la gente se hace con  
  los parámetros --keyserver NombreDelServidor --send-keys ClaveID

  Donde:
  ficheroDeSalida representa cualquier fichero donde se exportará la clave.
  ClaveID representa la dirección del correo del mantenedor del paquete.

  - Buscar claves públicas en servidores

  Si queremos importar una clave en concreto se hace con los parámetros --keyserver    
  NombreDelServidor --recv-keys ClaveID.

  - Importar una clave desde un servidor

   Si queremos subir una clave a un servidor para que esté disponbile para la gente se hace con 
   los parámetros --keyserver NombreDelServidor --send-keys ClaveID 

  - Exportar una clave desde un servidor
  gpg --armor --export <usuario@dominio> > mykey.asc 

 - Si dado caso  ver huella de la clave verificar si una clave pertenece realmente al propietario. Si se recibe una clave 
 podemos ver cual es su huella y luego pedirle a su propietario que nos diga su huella. Si ambas coinciden la clave es 
 correcta y no ha sido manipulada. Si no fuese igual es que ha sido modificada. La huella es como el md5 que verifica que 
 un archivo no ha sido manipulado. 

  - Anillo de confianza 
  Crear un anillo de confianza consiste en tener claves de gente firmada por otra gente que la  
  han firmado y que con su firma aseguran que esa clave es realmente de quien dice ser y no ha 
  sido alterada.

  Si por ejemplo tenemos las persona A y B. Las personas A y B son amigas y se intercambian 
  entre ellas las claves públicas, verifican sus fingerprints para ver que las claves son las 
  correctas y quedan para ver las claves que se han pasado son correctas. Entonces una vez 
  verificado que todo es correcto cada uno firma la clave de su amigo. Ahora si por ejemplo yo 
  obtengo la clave de B y veo que está firmada por A (que es una persona que conozco y en la 
  que confió) entonces me fio de que esa clave es la clave correcta de B y la puedo usar. Si 
  por un casual quedría firmar la clave de B con mi firma para abalar que su clave es buena 
  sería bueno que me pusiese en contacto con él y verficásemos la clave. 

  a. # gpg --sign key ClaveID 
     A continuación aparecerá una serie de preguntas. Escriba 'Y' si desea realizar la firma de 
     la clave gpg.

  b. # gpg --list-sigs
       Para ver la lista de claves y firmas 
 
 - Ver huella digital de la clave gpg

 #gpg --fingerprint ClaveID 

 Donde:
 ClaveID representa la dirección del correo del mantenedor del paquete.

 Normalmente nos va a bastar con subir nuestras claves públicas a un servidor al efecto; lo cual es recomendable y debido a 
 que el código de Almidon está disponible en el servidor de Guegue, éste debe ser empleado para llevar a cabo la siguiente 
 instrucción. Para comprobar la indentidad de alguien y bajarnos su clave pública desde un servidor definido al efecto, 
 podemos teclear la orden:

          # gpg –keyserver dominio_de_servidor –recv-keys key
 Ejemplo: # gpg –keyserver pgp.rediris.es –recv-keys 8314FEBD


Paso 4: Construimos del paquete Debian de Almidón

 --> Ingresamos al directorio almidon-version
 # cd /ruta/hacia/el/directorio/almidon-version
  a) Si desea utilizar los archivos plantillas preconfigurados para crear el paquete debian que 
     se encuentran incluidas dentro del directorio debian.
     Nota: Los archivos plantillas preconfigurados para crear el paquete debian que 
     se encuentran incluidas dentro del directorio debian se crearon para que trabajaran sólo
     con los archivos Makefile y configure,los cuales fueron generados con ayuda de autoconf y 
     automake, además están contenidos dentro de la carpeta del instalador llamado almidon-
     version.
         
  b) Si no desea crear y configurar desde cero los archivos necesarios para crear el paquete 
     debian( ya sea usando o no otro método para obtener el instalador que no está considerado 
     entre los pasos del archivo INSTALL, en otras palabras no empleando autoconf ni automake; 
     o simplemente añadir nuevos archivos de configuración que contiene la carpeta debian), 
     puede ejecutar la siguiente instrucción para se crean los archivos plantillas 
     preconfigurados para crear el paquete debian y editarlo como  usted lo desea más tarde. 
     Recuerde que una vez editados, quitarles la extensión .ex a aquellos archivos que lo 
     poseen para proceder a la creación del paquete debian sin inconvenientes.

     # dh_make --single -p almidon -f ./almidon-version.tar.gz -p almidon -c gpl -e           
       usuario@dominio.com --createorig  

     Donde:
         usuario corresponde a un nombre de usuario.
         dominio corresponde a un nombre del dominio del servidor donde está alojada la cuenta 
         de correo del usuario.

     Para más información sobre las opciones de dh_make escriba en la línea de comandos: 
     #man dh_make

    
Paso 5: Introducimos la versión del paquete debian por generar.
 Abrimos y editamos el archivo llamado changelog, con el siguiente comando:
 # gedit debian/changelog
 
 Buscamos la línea que contiene las siguientes palabras: 
 almidon (0.7.1) unstable; urgency=low

 donde:
       almidon corresponde al nombre del paquete
       0.7.1 corresponde a la versión del paquete

 Sólo reemplazamos si lo desea el nombre del paquete y la versión del mismo.

Paso 6: Construimos el paquete con dpkg-buildpackage
 Dentro del directorio que contiene el código fuente (no el directorio debian) ejecutamos: 

 Antes de ejecutar el siguiente verifique que está en el mismo directorio donde se encuentra el 
 archivo configure.

 # dpkg-buildpackage [-aarch] [-b ó -B ó -S] [-D ó -d] [-E] [-sgpg] [-kkeyID] 
   [-mNombre_del_mantenedor] [-eCorreo_del_mantenedor] [-v0.6.1] [-sa] [-tc] [-uc] [-us] 
   -rfakeroot
 Donde:

 aarch corresponde al tipo de arquitectura. Nota: Esta opción y su valor no es necesario  
 utilizarlo con el comando dpkg-buildpackage, ya que si no lo desea usar automaticamente se 
 crea el paquete para el tipo de arquitectura de la computadora que emplea el usuario. 

 -b Especifica un binario de sólo construir, no hay archivos de origen se van a construir
    y/o distribuidos.

 -B Especifica un binario de sólo construir, no independientes de la arquitectura archivos 
    binarios del paquete se distribuyen.

 -S Especifica una fuente de sólo construir, no hay paquetes binarios deben ser hizo.

 -D revisa dependencias and conflictos para la construcción del paquete; aborta si no se  
    sastiface.

 -d No comprobar las dependencias de construcción y los conflictos.

 -E muestra mensajes de errores a su vez ciertas advertencias. Sólo dpkg-source usa esto, pero 
 dpkg-buildpackage lo  reconoce, y lo pasa a dpkg-source.

 -tc Limpia el árbol de código fuente (que utilizan gain-root-command debian/rules
     clean) después de que el paquete ha sido construido.

 -k Especifique una clave de identificación para el uso al firmar los paquetes.

 -sa  Fuerza la inclusión de la fuente original.

 -uc No firma el archivo .changes.

 -us No firma el paquete fuente debian generado.

 Valores de opciones:

 key corresponde a identificador de la clave GPG generado en el Paso 3 que se utilizará para 
 crear el paquete debian.

 Nota: Las opciones y sus respectivos valores que van entre corchete([]) son opcionales cuando
       se ejecuta el comando. 
       Más información sobre comandos y opciones disponibles del comando dpkg-buildpackage 
       escriba: #man dpkg-buildpackage.

 Ejecute, por ejemplo:
 Si desea incluir la fuente original y firmar el paquete debian generado
 #dpkg-buildpackage -sa -kKeyID -rfakeroot -tc

 Si desea incluir la fuente original y  no firmar el paquete debian generado
 #dpkg-buildpackage -sa -us -uc -rfakeroot -tc

 Como resultado obtenemos el paquete debian llamado "almidon-version_tipo de plataforma.deb"
 guardado dentro del directorio de nivel superior por encima del directorio llamado 
 almidon-version. En otras saldrará un mensaje en la consola así: 
 "dpkg-buildpackage: Subida completa; Paquete nativo Debian (se incluye toda la fuente)"

  
Paso Opcional Nº2: 

Fuente obtenida de la pagina web: http://www.debian.org/doc/maint-guide/ch-upload.es.htm

Enviar el archivo de debian

Tendrás subir el paquete al archivo de Debian una vez que llegues a ser un desarrollador oficial. Puedes hacer esto manualmente, pero es más fácil hacerlo con las herramientas automáticas ya disponibles como dupload(1) o dput(1). A continuación describiremos como hacerlo con dupload.

En primer lugar, tienes que crear un fichero de configuración de dupload. Puedes hacerlo editando el fichero general del sistema /etc/dupload.conf, o creando tu propio fichero ~/.dupload.conf con lo que tu quieras cambiar. Pon algo como esto en el fichero:

       package packagename;
     
       $default_host = "anonymous-protocol-user";
     
       $cfg{'nombre_de_objetivo'} = {
             fqdn => "protocolo-dominio",
             method => "protocolo",
             incoming => "directorio",
             # files pass on to dinstall on ftp-master which sends emails itself
             dinstall_runs => 1,
       };
     
       1;

Por supuesto, cambia el nombre por el tuyo y lee la página de manual dupload.conf(5) para comprender qué significa cada una de estas opciones.

Por ejemplo:

1º Ejemplo:
       package config;
     
       $default_host = "anonymous-ftp-master";
     
       $cfg{'anonymous-ftp-master'} = {
             fqdn => "ftp-master.debian.org",
             method => "ftp",
             incoming => "/pub/UploadQueue/",
             # files pass on to dinstall on ftp-master which sends emails itself
             dinstall_runs => 1,
       };
     
       1;

2º Ejemplo:
       package almidon;
     
       $default_host = "anonymous-http-master";
     
       $cfg{'anonymous-http-master'} = {
             fqdn => "http://almidon.org",
             method => "http",
             incoming => "download/",
             # files pass on to dinstall on http-master which sends emails itself
             dinstall_runs => 1,
       };
     
       1;


La opción $default_host es la más problemática, determina cual de las colas de envios se usará por defecto. "anonymous-ftp-master" es la primaria, pero es posible que quieras usar otra más rápida. Para más información sobre las colas de envío, consulta la Referencia del desarrollador, en concreto la sección «Uploading a package», en /usr/share/doc/developers-reference/pkgs.html#upload

Ahora conecta con tu proveedor de Internet, y ejecuta la orden:

       dupload almidon_0.6.1_i386.changes

dupload comprueba que las sumas md5 coinciden con aquellas en el fichero .changes, y te avisará de rehacer el paquete como se describe en Reconstrucción completa, Sección 6.1 para poder enviarlo correctamente.

Si encuentras algún problema con la subida del paquete a http://almidon.org basado en ejemplo 2, puedes arreglarlo subiendo manualmente a http://almidon.org basado/download/ a través de http un fichero «*.commands» firmado con gnupg. [3]. Por ejemplo, usando «hello.commands»:


8.2 Enviar a un archivo privado

Puedes crear un repositorio personal de paquetes en URL="http://people.debian.org/~nombre_de_cuenta" (si eres desarrollador oficial) con una simple llamada a dupload -t nombre_de_objetivo. Para hacerlo deberías añadir lo siguiente al fichero «/etc/dupload.conf»:

     # Cuenta de desarrollador
     $cfg{'nombre_de_objetivo'} = {
             fqdn => "people.debian.org",
             method => "scpb",
             incoming => "/home/nombre_de_cuenta/public_html/package/",
             # No necesitas anunciarlo
             dinstall_runs => 1,
     };
     $cfg{'nombre_de_objetivo'}{preupload}{'changes'} = "
             echo 'mkdir -p public_html/package' | ssh people.debian.org  2>/dev/null ; 
             echo '¡Directorio de paquetes creado!'";
        
     $cfg{'nombre_de_objetivo'}{postupload}{'changes'} = "
             echo 'cd public_html/package ;
             dpkg-scanpackages . /dev/null >Packages || true ;
             dpkg-scansources . /dev/null >Sources || true ;
             gzip -c Packages >Packages.gz ;
             gzip -c Sources >Sources.gz ' | ssh people.debian.org  2>/dev/null ;
             echo '¡Archivo de paquetes creado!'";

Aquí, el repositorio APT se construye mediante una simple ejecución remota con SSH. Los ficheros de sobreescritura que necesitan dpkg-scanpackages y dpkg-scansources se especifican como /dev/null. Esta técnica la puede emplear alguien que no es desarrollador de Debian para almacenar sus paquetes en su página personal. También se pueden usar apt-ftparchive o otros programas para crear un repositorio APT.


Nota: Si desea verificar si se contruyó correctamente el paquete escriba lintian -i nombre_del_paquete.deb para ver los posibles errores y sus correspondientes correciones para resolver el problema.

Bibliografía:

Página web sobre el contenido para realizar los pasos necesarios para crear un paquete debian.

http://www.debian.org/doc/maint-guide/index.es.html#contents


